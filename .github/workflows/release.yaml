name: Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'New package version'
        required: true
permissions:
  contents: write

jobs:
  publish-to-pypi:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-0
      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Update version
        run: |
          OLD_VERSION=$(grep ^version pyproject.toml | cut -d '"' -f 2)
          OLD_VERSION="\"$OLD_VERSION\""
          sed -i "s+version = $OLD_VERSION+version = ${{ github.event.inputs.version }}+g" pyproject.toml
      - name: Commit and push changes
        if: steps.git-check.outputs.modified == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git commit -am "action: update version"
          git push
      - run: |
          poetry config repositories.my_pypi ${{ secrets.PYPI_URL }}
          poetry config http-basic.my_pypi ${{ secrets.PYPI_LOGIN }} ${{ secrets.PYPI_PASSWORD }}
          poetry publish --repository my_pypi --build